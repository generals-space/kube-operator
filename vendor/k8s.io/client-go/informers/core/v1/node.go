/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by informer-gen. DO NOT EDIT.

package v1

import (
	time "time"

	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	internalinterfaces "k8s.io/client-go/informers/internalinterfaces"
	kubernetes "k8s.io/client-go/kubernetes"
	v1 "k8s.io/client-go/listers/core/v1"
	cache "k8s.io/client-go/tools/cache"
)

// NodeInformer provides access to a shared informer and lister for
// Nodes.
type NodeInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1.NodeLister
}

type nodeInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewNodeInformer constructs a new informer for Node type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
// caller: ...没有地方调用这个, 可以见 informers/core/v1/interface.go -> version.Nodes() 中,
// 是如何构建 &nodeInformer{} 对象的, 一般是在创建 informerFactory 后, 
// 通过 factory.Core().V1().Nodes().Informer() 调用的.
func NewNodeInformer(
	client kubernetes.Interface, resyncPeriod time.Duration, indexers cache.Indexers,
) cache.SharedIndexInformer {
	return NewFilteredNodeInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredNodeInformer constructs a new informer for Node type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
// caller: NewNodeInformer()(不过没人调用), defaultInformer()
func NewFilteredNodeInformer(
	client kubernetes.Interface, 
	resyncPeriod time.Duration, 
	indexers cache.Indexers, 
	tweakListOptions internalinterfaces.TweakListOptionsFunc,
) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.CoreV1().Nodes().List(options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.CoreV1().Nodes().Watch(options)
			},
		},
		&corev1.Node{},
		resyncPeriod,
		indexers,
	)
}

func (f *nodeInformer) defaultInformer(
	client kubernetes.Interface, resyncPeriod time.Duration,
) cache.SharedIndexInformer {
	return NewFilteredNodeInformer(
		client, 
		resyncPeriod, 
		cache.Indexers{
			cache.NamespaceIndex: cache.MetaNamespaceIndexFunc,
		}, 
		f.tweakListOptions,
	)
}

// Informer 将 Node 对象添加到 factory 的监听列表中,
// 其实就是将 defaultInformer() 添加到 factory 的 informer 列表中, 
// 返回值其实就是 defaultInformer() 的返回值.
func (f *nodeInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&corev1.Node{}, f.defaultInformer)
}

func (f *nodeInformer) Lister() v1.NodeLister {
	// 这里的 GetIndexer() 返回的就是 
	// defaultInformer() -> NewFilteredNodeInformer() -> NewSharedIndexInformer() -> NewIndexer()
	// 的执行结果, 得到了一个 tools/cache/store.go -> cache{} 对象
	return v1.NewNodeLister(f.Informer().GetIndexer())
}
