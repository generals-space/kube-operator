// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"
	kubegroupv1 "generals-space/kube-operator/pkg/apis/kubegroup/v1"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakePodClusters implements PodClusterInterface
type FakePodClusters struct {
	Fake *FakeKubegroupV1
	ns   string
}

var podclustersResource = schema.GroupVersionResource{Group: "kubegroup.generals.space", Version: "v1", Resource: "podclusters"}

var podclustersKind = schema.GroupVersionKind{Group: "kubegroup.generals.space", Version: "v1", Kind: "PodCluster"}

// Get takes name of the podCluster, and returns the corresponding podCluster object, and an error if there is any.
func (c *FakePodClusters) Get(ctx context.Context, name string, options v1.GetOptions) (result *kubegroupv1.PodCluster, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(podclustersResource, c.ns, name), &kubegroupv1.PodCluster{})

	if obj == nil {
		return nil, err
	}
	return obj.(*kubegroupv1.PodCluster), err
}

// List takes label and field selectors, and returns the list of PodClusters that match those selectors.
func (c *FakePodClusters) List(ctx context.Context, opts v1.ListOptions) (result *kubegroupv1.PodClusterList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(podclustersResource, podclustersKind, c.ns, opts), &kubegroupv1.PodClusterList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &kubegroupv1.PodClusterList{ListMeta: obj.(*kubegroupv1.PodClusterList).ListMeta}
	for _, item := range obj.(*kubegroupv1.PodClusterList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested podClusters.
func (c *FakePodClusters) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(podclustersResource, c.ns, opts))

}

// Create takes the representation of a podCluster and creates it.  Returns the server's representation of the podCluster, and an error, if there is any.
func (c *FakePodClusters) Create(ctx context.Context, podCluster *kubegroupv1.PodCluster, opts v1.CreateOptions) (result *kubegroupv1.PodCluster, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(podclustersResource, c.ns, podCluster), &kubegroupv1.PodCluster{})

	if obj == nil {
		return nil, err
	}
	return obj.(*kubegroupv1.PodCluster), err
}

// Update takes the representation of a podCluster and updates it. Returns the server's representation of the podCluster, and an error, if there is any.
func (c *FakePodClusters) Update(ctx context.Context, podCluster *kubegroupv1.PodCluster, opts v1.UpdateOptions) (result *kubegroupv1.PodCluster, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(podclustersResource, c.ns, podCluster), &kubegroupv1.PodCluster{})

	if obj == nil {
		return nil, err
	}
	return obj.(*kubegroupv1.PodCluster), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakePodClusters) UpdateStatus(ctx context.Context, podCluster *kubegroupv1.PodCluster, opts v1.UpdateOptions) (*kubegroupv1.PodCluster, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(podclustersResource, "status", c.ns, podCluster), &kubegroupv1.PodCluster{})

	if obj == nil {
		return nil, err
	}
	return obj.(*kubegroupv1.PodCluster), err
}

// Delete takes name of the podCluster and deletes it. Returns an error if one occurs.
func (c *FakePodClusters) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(podclustersResource, c.ns, name), &kubegroupv1.PodCluster{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakePodClusters) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(podclustersResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &kubegroupv1.PodClusterList{})
	return err
}

// Patch applies the patch and returns the patched podCluster.
func (c *FakePodClusters) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *kubegroupv1.PodCluster, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(podclustersResource, c.ns, name, pt, data, subresources...), &kubegroupv1.PodCluster{})

	if obj == nil {
		return nil, err
	}
	return obj.(*kubegroupv1.PodCluster), err
}
