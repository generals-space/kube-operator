// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	"context"
	v1 "generals-space/kube-operator/pkg/apis/kubegroup/v1"
	scheme "generals-space/kube-operator/pkg/client/clientset_generated/clientset/scheme"
	"time"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// PodClustersGetter has a method to return a PodClusterInterface.
// A group's client should implement this interface.
type PodClustersGetter interface {
	PodClusters(namespace string) PodClusterInterface
}

// PodClusterInterface has methods to work with PodCluster resources.
type PodClusterInterface interface {
	Create(ctx context.Context, podCluster *v1.PodCluster, opts metav1.CreateOptions) (*v1.PodCluster, error)
	Update(ctx context.Context, podCluster *v1.PodCluster, opts metav1.UpdateOptions) (*v1.PodCluster, error)
	UpdateStatus(ctx context.Context, podCluster *v1.PodCluster, opts metav1.UpdateOptions) (*v1.PodCluster, error)
	Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error
	Get(ctx context.Context, name string, opts metav1.GetOptions) (*v1.PodCluster, error)
	List(ctx context.Context, opts metav1.ListOptions) (*v1.PodClusterList, error)
	Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.PodCluster, err error)
	PodClusterExpansion
}

// podClusters implements PodClusterInterface
type podClusters struct {
	client rest.Interface
	ns     string
}

// newPodClusters returns a PodClusters
func newPodClusters(c *KubegroupV1Client, namespace string) *podClusters {
	return &podClusters{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the podCluster, and returns the corresponding podCluster object, and an error if there is any.
func (c *podClusters) Get(ctx context.Context, name string, options metav1.GetOptions) (result *v1.PodCluster, err error) {
	result = &v1.PodCluster{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("podclusters").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do(ctx).
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of PodClusters that match those selectors.
func (c *podClusters) List(ctx context.Context, opts metav1.ListOptions) (result *v1.PodClusterList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1.PodClusterList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("podclusters").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do(ctx).
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested podClusters.
func (c *podClusters) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("podclusters").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch(ctx)
}

// Create takes the representation of a podCluster and creates it.  Returns the server's representation of the podCluster, and an error, if there is any.
func (c *podClusters) Create(ctx context.Context, podCluster *v1.PodCluster, opts metav1.CreateOptions) (result *v1.PodCluster, err error) {
	result = &v1.PodCluster{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("podclusters").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(podCluster).
		Do(ctx).
		Into(result)
	return
}

// Update takes the representation of a podCluster and updates it. Returns the server's representation of the podCluster, and an error, if there is any.
func (c *podClusters) Update(ctx context.Context, podCluster *v1.PodCluster, opts metav1.UpdateOptions) (result *v1.PodCluster, err error) {
	result = &v1.PodCluster{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("podclusters").
		Name(podCluster.Name).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(podCluster).
		Do(ctx).
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *podClusters) UpdateStatus(ctx context.Context, podCluster *v1.PodCluster, opts metav1.UpdateOptions) (result *v1.PodCluster, err error) {
	result = &v1.PodCluster{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("podclusters").
		Name(podCluster.Name).
		SubResource("status").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(podCluster).
		Do(ctx).
		Into(result)
	return
}

// Delete takes name of the podCluster and deletes it. Returns an error if one occurs.
func (c *podClusters) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("podclusters").
		Name(name).
		Body(&opts).
		Do(ctx).
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *podClusters) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error {
	var timeout time.Duration
	if listOpts.TimeoutSeconds != nil {
		timeout = time.Duration(*listOpts.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("podclusters").
		VersionedParams(&listOpts, scheme.ParameterCodec).
		Timeout(timeout).
		Body(&opts).
		Do(ctx).
		Error()
}

// Patch applies the patch and returns the patched podCluster.
func (c *podClusters) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.PodCluster, err error) {
	result = &v1.PodCluster{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("podclusters").
		Name(name).
		SubResource(subresources...).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(data).
		Do(ctx).
		Into(result)
	return
}
