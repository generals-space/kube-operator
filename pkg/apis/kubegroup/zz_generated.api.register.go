// Code generated by apiregister-gen. DO NOT EDIT.

package kubegroup

import (
	"context"
	"fmt"

	"k8s.io/apimachinery/pkg/apis/meta/internalversion"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apiserver/pkg/registry/rest"
	"sigs.k8s.io/apiserver-builder-alpha/pkg/builders"
)

var (
	KubegroupPodClusterStorage = builders.NewApiResource( // Resource status endpoint
		InternalPodCluster,
		func() runtime.Object { return &PodCluster{} },     // Register versioned resource
		func() runtime.Object { return &PodClusterList{} }, // Register versioned resource list
		&PodClusterStrategy{builders.StorageStrategySingleton},
	)
	InternalPodCluster = builders.NewInternalResource(
		"podclusters",
		"PodCluster",
		func() runtime.Object { return &PodCluster{} },
		func() runtime.Object { return &PodClusterList{} },
	)
	InternalPodClusterStatus = builders.NewInternalResourceStatus(
		"podclusters",
		"PodClusterStatus",
		func() runtime.Object { return &PodCluster{} },
		func() runtime.Object { return &PodClusterList{} },
	)
	// Registered resources and subresources
	ApiVersion = builders.NewApiGroup("kubegroup.generals.space").WithKinds(
		InternalPodCluster,
		InternalPodClusterStatus,
	)

	// Required by code generated by go2idl
	AddToScheme = (&runtime.SchemeBuilder{
		ApiVersion.SchemeBuilder.AddToScheme,
		RegisterDefaults,
	}).AddToScheme
	SchemeBuilder      = ApiVersion.SchemeBuilder
	localSchemeBuilder = &SchemeBuilder
	SchemeGroupVersion = ApiVersion.GroupVersion
)

// Required by code generated by go2idl
// Kind takes an unqualified kind and returns a Group qualified GroupKind
func Kind(kind string) schema.GroupKind {
	return SchemeGroupVersion.WithKind(kind).GroupKind()
}

// Required by code generated by go2idl
// Resource takes an unqualified resource and returns a Group qualified GroupResource
func Resource(resource string) schema.GroupResource {
	return SchemeGroupVersion.WithResource(resource).GroupResource()
}

// +genclient
// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type PodCluster struct {
	metav1.TypeMeta
	metav1.ObjectMeta
	Spec   PodClusterSpec
	Status PodClusterStatus
}

type PodClusterSpec struct {
}

type PodClusterStatus struct {
}

//
// PodCluster Functions and Structs
//
// +k8s:deepcopy-gen=false
type PodClusterStrategy struct {
	builders.DefaultStorageStrategy
}

// +k8s:deepcopy-gen=false
type PodClusterStatusStrategy struct {
	builders.DefaultStatusStorageStrategy
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type PodClusterList struct {
	metav1.TypeMeta
	metav1.ListMeta
	Items []PodCluster
}

func (PodCluster) NewStatus() interface{} {
	return PodClusterStatus{}
}

func (pc *PodCluster) GetStatus() interface{} {
	return pc.Status
}

func (pc *PodCluster) SetStatus(s interface{}) {
	pc.Status = s.(PodClusterStatus)
}

func (pc *PodCluster) GetSpec() interface{} {
	return pc.Spec
}

func (pc *PodCluster) SetSpec(s interface{}) {
	pc.Spec = s.(PodClusterSpec)
}

func (pc *PodCluster) GetObjectMeta() *metav1.ObjectMeta {
	return &pc.ObjectMeta
}

func (pc *PodCluster) SetGeneration(generation int64) {
	pc.ObjectMeta.Generation = generation
}

func (pc PodCluster) GetGeneration() int64 {
	return pc.ObjectMeta.Generation
}

// Registry is an interface for things that know how to store PodCluster.
// +k8s:deepcopy-gen=false
type PodClusterRegistry interface {
	ListPodClusters(ctx context.Context, options *internalversion.ListOptions) (*PodClusterList, error)
	GetPodCluster(ctx context.Context, id string, options *metav1.GetOptions) (*PodCluster, error)
	CreatePodCluster(ctx context.Context, id *PodCluster) (*PodCluster, error)
	UpdatePodCluster(ctx context.Context, id *PodCluster) (*PodCluster, error)
	DeletePodCluster(ctx context.Context, id string) (bool, error)
}

// NewRegistry returns a new Registry interface for the given Storage. Any mismatched types will panic.
func NewPodClusterRegistry(sp builders.StandardStorageProvider) PodClusterRegistry {
	return &storagePodCluster{sp}
}

// Implement Registry
// storage puts strong typing around storage calls
// +k8s:deepcopy-gen=false
type storagePodCluster struct {
	builders.StandardStorageProvider
}

func (s *storagePodCluster) ListPodClusters(ctx context.Context, options *internalversion.ListOptions) (*PodClusterList, error) {
	if options != nil && options.FieldSelector != nil && !options.FieldSelector.Empty() {
		return nil, fmt.Errorf("field selector not supported yet")
	}
	st := s.GetStandardStorage()
	obj, err := st.List(ctx, options)
	if err != nil {
		return nil, err
	}
	return obj.(*PodClusterList), err
}

func (s *storagePodCluster) GetPodCluster(ctx context.Context, id string, options *metav1.GetOptions) (*PodCluster, error) {
	st := s.GetStandardStorage()
	obj, err := st.Get(ctx, id, options)
	if err != nil {
		return nil, err
	}
	return obj.(*PodCluster), nil
}

func (s *storagePodCluster) CreatePodCluster(ctx context.Context, object *PodCluster) (*PodCluster, error) {
	st := s.GetStandardStorage()
	obj, err := st.Create(ctx, object, nil, &metav1.CreateOptions{})
	if err != nil {
		return nil, err
	}
	return obj.(*PodCluster), nil
}

func (s *storagePodCluster) UpdatePodCluster(ctx context.Context, object *PodCluster) (*PodCluster, error) {
	st := s.GetStandardStorage()
	obj, _, err := st.Update(ctx, object.Name, rest.DefaultUpdatedObjectInfo(object), nil, nil, false, &metav1.UpdateOptions{})
	if err != nil {
		return nil, err
	}
	return obj.(*PodCluster), nil
}

func (s *storagePodCluster) DeletePodCluster(ctx context.Context, id string) (bool, error) {
	st := s.GetStandardStorage()
	_, sync, err := st.Delete(ctx, id, nil, &metav1.DeleteOptions{})
	return sync, err
}
